// External
import { expectSaga, testSaga } from 'redux-saga-test-plan';
import * as matchers from 'redux-saga-test-plan/matchers';
import { throwError } from 'redux-saga-test-plan/providers';
import { select } from 'redux-saga/effects'; // mock selectors call

// Internal
import reducer from '../reducer';
import {{camelName}}Actions from '../actions';
{{#if util}}import util from '../util';{{/if}}
import * as {{camelName}}Sagas from '../sagas';
import api from '~GlobalUtil/api';
{{#if selectors}}import { getStore } from '../selectors';{{/if}}

const { {{name}} } = {{camelName}}Actions;

/* eslint-disable max-len */
const {{camelName}}SagasTest = () =>
  describe('Sagas: ', () => {
    describe('Section Sagas: ', () => {
      describe('Watchers: ', () => {
        it('Should catch request ', () => {testSaga({{camelName}}Sagas.watchRequestForGeneratorName) // match to watcher
          .next() // start generator
          .takeLatest(types, {{camelName}}Sagas) // match to generator
          .next() // step through generator
          .isDone()});
      });

      describe('Section Series: ', () => {
        it('Should be successful ', () => {
          const request = {};
          return expectSaga({{camelName}}Sagas, { payload: request }) // promise/generator
            .provide([ // mock selector and api calls
              [select(getStore),'9503'],
              [matchers.call.fn(api, request), { data: [{ id: 'adfa' }] }], // supply mock return data from api
            ])
            .withReducer(reducer)
            .hasFinalState({{#if util}}util.buildMockStore({}){{else}}{}{{/if}})
            .put(actions()) // eventual action that will be called
            .dispatch(actions('null')) // dispatch action that starts saga
            .run();
        });

        it('Should fail ', () => expectSaga({{camelName}}Sagas, { payload: 'some data' })
          .provide([
            // [select(getStore),'123123123'],
            [matchers.call.fn(api), throwError('Error retrieving devices')], // supply error that will be thrown by api
          ])
          .withReducer(reducer)
          .hasFinalState({{#if util}}util.buildMockStore({}){{else}}{}{{/if}})
          .put(actions('Error Fetching'))
          .dispatch(actions())
          .run());
      })
    })
  })


export default {{camelName}}SagasTest;
